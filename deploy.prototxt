import cv2
import os
import sys

# Path to the folder containing training images
training_folder_path = "C:/Users/Rameesha/Desktop/TrainingImage"

# Load the face detection cascade classifier
face_cascade = cv2.CascadeClassifier(cv2.data.haarcascades + "haarcascade_frontalface_default.xml")

# Load all the training images and their names into a dictionary
training_images = {}
for file_name in os.listdir(training_folder_path):
    if file_name.endswith(".jpg") or file_name.endswith(".jpeg") or file_name.endswith(".png"):
        image_path = os.path.join(training_folder_path, file_name)
        training_images[file_name] = cv2.imread(image_path)

# Get the user input image path
input_image_path = input("Enter the path to the input image: ")

# Check if the input image file exists
if not os.path.isfile(input_image_path):
    print("Invalid input image path!")
    sys.exit(1)

# Load the input image
input_image = cv2.imread(input_image_path)

# Convert the input image to grayscale
gray_input_image = cv2.cvtColor(input_image, cv2.COLOR_BGR2GRAY)

# Detect faces in the input image using the cascade classifier
detected_faces = face_cascade.detectMultiScale(gray_input_image, scaleFactor=1.1, minNeighbors=5)

# Flag to track if a match is found
match_found = False

# Iterate through each detected face and match it with the training images
for (x, y, w, h) in detected_faces:
    face_roi = gray_input_image[y:y+h, x:x+w]

    # Iterate through each training image and compare their ROI to the input face ROI
    for name, training_image in training_images.items():
        resized_training_image = cv2.resize(training_image, (w, h))
        resized_training_gray = cv2.cvtColor(resized_training_image, cv2.COLOR_BGR2GRAY)

        # Compare the input face ROI with the training image ROI using absolute difference
        diff = cv2.absdiff(face_roi, resized_training_gray)
        mean_diff = np.mean(diff)

        # Threshold for face similarity
        if mean_diff < 15:
            match_found = True
            print("Yes, the input image matches with the training image:", name)

# If no match is found, output "No"
if not match_found:
    print("No, the input image does not match with any of the training images.")
